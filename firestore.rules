rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Rules for specific user documents and their subcollections
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId); // Owner can write their own user doc

      match /todos/{todoId} {
        allow read, update: if isAuthenticated() && (
                               isOwner(userId) ||
                               (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith)
                             );
        allow create, delete: if isOwner(userId);
      }

      // Contacts subcollection: users/{ownerId}/contacts/{contactEntryId}
      // ownerId = Der Benutzer, dem die Kontaktliste gehört
      // contactEntryId = Die UID des Kontakts in der Liste
      match /contacts/{contactEntryId} {
        // Der ownerId kann seine gesamte Kontaktliste lesen, Einträge hinzufügen, ändern, löschen
        allow read, write, delete: if isOwner(userId);

        // ERGÄNZUNG: Der Benutzer, dessen UID dem contactEntryId entspricht,
        // darf seinen eigenen Eintrag in der Liste eines anderen Benutzers ERSTELLEN.
        // Dies wird benötigt, wenn User B die Anfrage von User A annimmt
        // und User B sich selbst zur Kontaktliste von User A hinzufügt.
        // Der 'userId' im Pfad ist hier der 'ownerId' der Kontaktliste (z.B. User A).
        // Der 'contactEntryId' im Pfad ist die UID des Kontakts, der hinzugefügt wird (z.B. User B).
        allow create: if isAuthenticated() && request.auth.uid == contactEntryId;
      }

      // Outgoing Contact Requests: users/{senderId_in_path}/outgoingContactRequests/{receiverIdOrHashedEmail_in_path}
      // userId in isOwner(userId) refers to senderId_in_path
      match /outgoingContactRequests/{receiverIdOrHashedEmail_in_path} {
        // Sender (owner) can read, create, write, and delete their outgoing requests.
        allow read, write, delete: if isOwner(userId);
        
        // Receiver can delete a PENDING request (e.g., when rejecting or accepting it).
        // This rule should NOT apply to 'invited' status as there's no actual receiver user yet to take action.
        // It also shouldn't allow a receiver to delete an already accepted/rejected request from the sender's outgoing list.
        allow delete: if isAuthenticated() && 
                       request.auth.uid == receiverIdOrHashedEmail_in_path &&
                       // Ensure the document exists and its status is 'pending' before allowing deletion by receiver.
                       // Direct access to resource.data for status check is needed here.
                       (exists(/databases/$(database)/documents/users/$(userId)/outgoingContactRequests/$(receiverIdOrHashedEmail_in_path)) &&
                        get(/databases/$(database)/documents/users/$(userId)/outgoingContactRequests/$(receiverIdOrHashedEmail_in_path)).data.status == 'pending');
      }

      // Incoming Contact Requests: users/{receiverId_in_path}/incomingContactRequests/{senderId_in_path}
      // userId in isOwner(userId) refers to receiverId_in_path
      match /incomingContactRequests/{senderId_in_path} {
        // Receiver (owner) can read their incoming requests.
        allow read: if isOwner(userId);
        // Receiver (owner) OR the original Sender (senderId_in_path) can delete the incoming request.
        // (e.g. receiver rejects/accepts, sender cancels their request).
        allow delete: if isOwner(userId) || (isAuthenticated() && request.auth.uid == senderId_in_path);
        // Sender (senderId_in_path) can create an incoming request for the receiver (userId).
        allow create: if isAuthenticated() && request.auth.uid == senderId_in_path;
      }
    }

    // Collection group queries
    match /{path=**}/todos/{todoId} {
       allow read: if isAuthenticated() && (
                       request.auth.uid == path[1] ||
                       (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith) ||
                       (resource.data.mentionedUsers != null && request.auth.uid in resource.data.mentionedUsers)
                    );
    }
  }
} 